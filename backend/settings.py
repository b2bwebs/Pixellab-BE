"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# Check if we're in development mode
is_development = config("ENVIRONMENT", default="production") == "development"
if is_development:
    # Local development settings
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
    ]
else:
    # Production settings
    ALLOWED_HOSTS = ["ct.pixeldemo.store", "ct-backend.pixeldemo.store"]

    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOWED_ORIGINS = [
        "https://ct.pixeldemo.store",
        "https://ct-backend.pixeldemo.store",
    ]  # Enable security settings

# Application definition
"""
Project Apps Definitions
Django APPS-Django Default Apps
Third party Apps-Apps installed via requirements.txt
Project Apps-project owned/created apps
installed Apps= Django Apps + Third Part apps + Projects Apps
"""

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "oauth2_provider",
    "corsheaders",
    "rest_framework_simplejwt.token_blacklist",
    "import_export",
    "django_filters",
]
PROJECT_APPS = ["custom_users", "clients"]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS
OAUTH2_PROVIDER = {
    "SCOPES": {
        "read": "Read scope",
        "write": "Write scope",
        "groups": "Access to your groups",
        "custom_scope": "Custom scope for special access",
    },
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    # "ACCESS_TOKEN_EXPIRE_SECONDS": 172800,  # 2 days
}
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
LOGIN_URL = "/admin/login/"
CORS_ALLOW_ALL_ORIGINS = True
AUTH_USER_MODEL = "custom_users.User"
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",  # OAuth2
    ),
    "DEFAULT_THROTTLE_RATES": {"anon": "2/day", "user": "5/hour", "custom": "5/minute"},
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    # "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=240),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    # 'UPDATE_LAST_LOGIN': True,
    # 'SIGNING_KEY': 'px6itrTcLbscYoW35cztuUzcxcaclWok',
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}
ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": config("DB_CONNECTION"),
        "NAME": config("DATABASE_NAME"),
        "HOST": config("DB_HOST"),
        "USER": config("DB_USERNAME"),
        "PASSWORD": config("DB_PASSWORD"),
        "PORT": config("DB_PORT"),
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

logs_path = BASE_DIR / "logs"
if not os.path.exists(logs_path):
    os.makedirs(logs_path)
# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(lineno)d %(funcName)s %(message)s"
        }
    },
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "handlers": {
        "error_handler": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs/error.log",
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "base_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs/request.log",
            "maxBytes": 1024 * 1024 * 16,
            "backupCount": 100,
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "subscription_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs/subscription.log",
            "maxBytes": 1024 * 1024 * 16,
            "backupCount": 100,
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "notification_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs/notification.log",
            "maxBytes": 1024 * 1024 * 16,
            "backupCount": 100,
            "formatter": "verbose",
            "encoding": "utf-8",
        },
    },
    "loggers": {
        "error_logger": {
            "handlers": ["error_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
        "request_logger": {
            "handlers": ["base_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
        "subscription_logger": {
            "handlers": ["subscription_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
        "notification_logger": {
            "handlers": ["notification_handler"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = BASE_DIR / "static"
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Email backend configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# SMTP server configuration
EMAIL_HOST = "smtp.gmail.com"  # Replace with your SMTP server
EMAIL_PORT = 587  # Port for TLS, use 465 for SSL
EMAIL_USE_TLS = True  # Use TLS (True) or SSL (False)
EMAIL_USE_SSL = False  # Use SSL (True) or not (False)
EMAIL_HOST_USER = "ptkiddoscastle@gmail.com"  # Your email address
EMAIL_HOST_PASSWORD = "pcunqkmvresfoezl"  # Your email password

# Default from email address
DEFAULT_FROM_EMAIL = "ptkiddoscastle@gmail.com"
# FEDEX_CLIENT_ID = config("FEDEX_CLIENT_ID1")
# FEDEX_CLIENT_SECRET = config("FEDEX_CLIENT_SECRET")
